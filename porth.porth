include "std.porth"

macro MEM_CAPACITY    640000 end
macro SIM_STACK_CAP   1024   end

// operation codes
macro OP_PUSH_INT 0 end
macro OP_PLUS     1 end
macro OP_MINUS    2 end
macro OP_PRINT    3 end
macro OP_DUP      4 end
macro OP_DROP     5 end
macro COUNT_OPZ   6 end

macro sizeof(Op)  16  end
macro Op.typ      0 + end
macro Op.operand  8 + end
macro @Op.typ     Op.typ @64 end
macro @Op.operand Op.operand @64 end
macro !Op.typ     Op.typ !64 end
macro !Op.operand Op.operand !64 end

macro OPS_CAP 1024 end

// memory layout variables
memory file_path_cstr  sizeof(ptr)                 end
memory fd              sizeof(u64)                 end
memory statbuf         sizeof(stat)                end
memory content         sizeof(Str)                 end
memory line            sizeof(Str)                 end
memory word            sizeof(Str)                 end
memory line_number     sizeof(u64)                 end
memory line_start      sizeof(ptr)                 end
memory sim-stack-count sizeof(u64)                 end 
memory sim-stack       sizeof(u64) SIM_STACK_CAP * end
memory ops-count       sizeof(u64)                 end
memory ops             sizeof(Op)  OPS_CAP *       end

macro sim-stack-push // u64 --
    if sim-stack-count @64 SIM_STACK_CAP >= do
        here eputs ": ERROR: sim stack overflow in simulation mode\n" eputs 1 exit 
    end

    sim-stack sim-stack-count @64 8 * + !64

    sim-stack-count inc64
end

macro sim-stack-pop // -- u64
    if sim-stack-count @64 0 = do 
        here eputs ": ERROR: sim stack underflow in simulation mode\n" eputs 1 exit
    end
    sim-stack-count dec64
    sim-stack sim-stack-count @64 8 * + @64
end

macro push-op // type operand --
    ops-count @64 sizeof(Op) * ops +
    dup rot swap !Op.operand
    !Op.typ 
    ops-count inc64
end

macro try_to_parse_word_as_int_or_fail_as_unknown_word // n1 s1 - ret
    0 0 while dup word @Str.count < do
      dup word @Str.data + @8
  
      if dup is-digit lnot do
        file_path_cstr @64 cast(ptr) cstr-to-str eputs
        ":" puts line_number @64 putd
        ":" puts word @Str.data cast(int) line_start @64 - 1 + putd
        ": ERROR: `" eputs word @Str eputs "` is an unknown word\n" eputs
        1 exit
      end
  
      '0' -
      rot 10 * +
      swap
      1 +
    end drop
end

macro print-op-typ
    if COUNT_OPZ 6 != do
        here eputs ": Assertion Failed: Exhaustive handling of Op types in print-op-typ\n" eputs
        1 exit
    end
    if dup OP_PUSH_INT = do
        "OP_PUSH_INT" puts
    elif dup OP_PLUS   = do
        "OP_PLUS" puts
    elif dup OP_MINUS   = do
        "OP_MINUS" puts
    elif dup OP_PRINT   = do
        "OP_PRINT" puts
    elif dup OP_DUP   = do
        "OP_DUP" puts
    elif dup OP_DROP   = do
        "OP_DROP" puts
    else
        here eputs ": unknown op type\n" eputs 
    end
    drop
end

macro print-opz // --
    0 while dup ops-count @64 < do
        // ptr
        dup sizeof(Op) * ops +
        "Type:    " puts dup @Op.typ print-op-typ "\n" puts 
        "Operand: " puts @Op.operand print
        "------------------\n" puts
        1 +
    end drop
end

macro simulate-opz
    0 while dup ops-count @64 < do
        // ptr type
        dup sizeof(Op) * ops +

        if COUNT_OPZ 6 != do
            here eputs ": Assertion Failed: Exhaustive handling of Op types in print-op-typ\n" eputs
            1 exit
        end

        // ptr
        if dup @Op.typ OP_PUSH_INT = do
            dup @Op.operand sim-stack-push
        elif dup @Op.typ OP_PLUS = do
            sim-stack-pop
            sim-stack-pop
            +
            sim-stack-push
        elif dup @Op.typ OP_MINUS = do
            sim-stack-pop
            sim-stack-pop
            swap
            -
            sim-stack-push
        elif dup @Op.typ OP_PRINT = do
            sim-stack-pop print
        elif dup @Op.typ OP_PRINT = do
            sim-stack-pop print
        elif dup @Op.typ OP_DUP = do
            sim-stack-pop
            dup
            sim-stack-push
            sim-stack-push
        elif dup @Op.typ OP_DROP = do
            sim-stack-pop
            drop
        else 
            here eputs ": unreachable\n" eputs 1 exit
        end 
        drop
        1 +
    end drop
end

// TODO: porth.porth does not run nasm and ld as external commands to finish off the process of compilation
macro compile-opz // --
    "BITS 64\n" puts
    "segment .text\n" puts
    "print:\n" puts
    "    mov     r9, -3689348814741910323\n" puts
    "    sub     rsp, 40\n" puts
    "    mov     BYTE [rsp+31], 10\n" puts
    "    lea     rcx, [rsp+30]\n" puts
    ".L2:\n" puts
    "    mov     rax, rdi\n" puts
    "    lea     r8, [rsp+32]\n" puts
    "    mul     r9\n" puts
    "    mov     rax, rdi\n" puts
    "    sub     r8, rcx\n" puts
    "    shr     rdx, 3\n" puts
    "    lea     rsi, [rdx+rdx*4]\n" puts
    "    add     rsi, rsi\n" puts
    "    sub     rax, rsi\n" puts
    "    add     eax, 48\n" puts
    "    mov     BYTE [rcx], al\n" puts
    "    mov     rax, rdi\n" puts
    "    mov     rdi, rdx\n" puts
    "    mov     rdx, rcx\n" puts
    "    sub     rcx, 1\n" puts
    "    cmp     rax, 9\n" puts
    "    ja      .L2\n" puts
    "    lea     rax, [rsp+32]\n" puts
    "    mov     edi, 1\n" puts
    "    sub     rdx, rax\n" puts
    "    xor     eax, eax\n" puts
    "    lea     rsi, [rsp+32+rdx]\n" puts
    "    mov     rdx, r8\n" puts
    "    mov     rax, 1\n" puts
    "    syscall\n" puts
    "    add     rsp, 40\n" puts
    "    ret\n" puts
    "global _start\n" puts
    "_start:\n" puts
    "    mov [args_ptr], rsp\n" puts

    0 while dup ops-count @64 < do
        if COUNT_OPZ 6 != do
            here eputs ": Assertion Failed: Exhaustive handling of Op types in parse-file-path\n" eputs
            1 exit
        end
        // ptr type
        dup sizeof(Op) * ops +

        // ptr
        if dup @Op.typ OP_PUSH_INT = do
            ";;  -- push int " puts dup Op.operand @64 putd " --\n" puts
            "    mov rax, " puts dup Op.operand @64 putd "\n" puts
            "    push rax\n" puts
        elif dup @Op.typ OP_PLUS = do
            ";;  -- plus --\n" puts
            "    pop rax\n" puts
            "    pop rbx\n" puts
            "    add rax, rbx\n" puts
            "    push rax\n" puts
        elif dup @Op.typ OP_MINUS = do
            ";;  -- minus --\n" puts
            "    pop rax\n" puts
            "    pop rbx\n" puts
            "    sub rbx, rax\n" puts
            "    push rbx\n" puts
        elif dup @Op.typ OP_PRINT = do
            ";;  -- print --\n" puts
            "    pop rdi\n" puts
            "    call print\n" puts
        elif dup @Op.typ OP_DUP = do
            ";;  -- dup --\n" puts
            "    pop rax\n" puts
            "    push rax\n" puts
            "    push rax\n" puts
        elif dup @Op.typ OP_DROP = do
            ";;  -- drop --\n" puts
            "    pop rax\n" puts
        else 
            here eputs ": unreachable\n" eputs 1 exit
        end
        drop
        1 +
    end drop
    "    mov rax, 60\n" puts
    "    mov rdi, 0\n" puts
    "    syscall\n" puts
    "segment .bss\n" puts
    "args_ptr: resq 1\n" puts
    "mem: resb " puts MEM_CAPACITY putd "\n" puts
end

macro parse_file_path_cstr_into_opz
    // open the file
    O_RDONLY   // flags
    file_path_cstr @64 cast(ptr) // pathname
    AT_FDCWD   // dirfd
    openat

    // validate successful opening of the file
    if dup 0 < do
        "ERROR: could not open file `" eputs file_path_cstr @64 cast(ptr) cstr-to-str eputs "` not found\n" eputs
        1 exit
    end

    // save file descriptor to a global variable
    fd !64

    if statbuf fd @64 fstat 0 < do
        "ERROR: could not determine the size of the file `" eputs file_path_cstr @64 cast(ptr) cstr-to-str eputs "`\n" eputs
        1 exit
    end

    // save the size of the file into the count of the content
    statbuf @stat.st_size content !Str.count 

    // memory map the file
    0                         // offset
    fd @64                    // fd
    MAP_PRIVATE               // flags
    PROT_READ                 // protc
    statbuf stat.st_size @64  // length
    NULL                      // addr
    mmap
    // save output of mmap onto `Str.data` of the `content` memory
    content !Str.data

    // validate success of the `mmap` syscall ~ validate memory mapping was successful
    if content @Str.data cast(int) 0 < do
        "ERROR: could not memory map file `" eputs file_path_cstr @64 cast(ptr) cstr-to-str eputs "`\n" eputs
        1 exit
    end

    1 line_number !64
    while content @Str.count 0 > do
      line content str-chop-line
      line @Str.data line_start !64
      while line @Str.count 0 > do
         line str-trim-left
         word line str-chop-word
  
         if COUNT_OPZ 6 != do
           here eputs ": Assertion Failed: Exhaustive handling of Op types in parse-file-path\n" eputs
           1 exit
         end
  
         if word @Str "+" streq do
           OP_PLUS 0 push-op
         elif word @Str "-" streq do
           OP_MINUS 0 push-op
         elif word @Str "print" streq do
           OP_PRINT 0 push-op
         elif word @Str "dup" streq do
           OP_DUP 0 push-op
         elif word @Str "drop" streq do
           OP_DROP 0 push-op
         else
           OP_PUSH_INT try_to_parse_word_as_int_or_fail_as_unknown_word push-op
         end
      end
      line_number inc64
    end
    // TODO: parse_file_path does not clean up resources after itself
end

macro print_usage 
    dup "Usage: porth <SUBCOMMAND>\n" rot fputs
    dup "  SUBCOMMAND:\n" rot fputs
    dup "    sim <file>     Simulate the program\n" rot fputs
    dup "    com            Compile the program\n" rot fputs
    dup "    print          Print ops of the program\n" rot fputs
    dup "    help           Print this help to the stderr ane exit with 0 code\n" rot fputs
    drop
end
// TODO: parsing file is not implemented
// TODO: user cannot choose the mode (com vs sim) from command line args

// entrypoint of the program
macro main 
    if argc 2 < do
        stderr print_usage
        here eputs ": ERROR: subcommands is not provided\n" eputs
        1 exit
    end

    1 nth_argv
    if dup "com"c cstreq do
        if argc 3 < do
            stderr print_usage
            "ERROR: No input file provided for the `com` subcommand" eputs
            1 exit
        end
        2 nth_argv file_path_cstr !64

        parse_file_path_cstr_into_opz

        compile-opz
    elif dup "sim"c cstreq do
        if argc 3 < do
            stderr print_usage
            "ERROR: No input file provided for the `sim` subcommand" eputs
            1 exit
        end
        2 nth_argv file_path_cstr !64

        parse_file_path_cstr_into_opz

        simulate-opz
    elif dup "print"c cstreq do
        if argc 3 < do
            stderr print_usage
            "ERROR: No input file provided for the `print` subcommand" eputs
            1 exit
        end
        
        2 nth_argv file_path_cstr !64

        parse_file_path_cstr_into_opz

        print-opz
    elif dup "help"c cstreq do
        stdout print_usage
        0 exit
    else
        stderr print_usage
        "ERROR: unknown subcommand `" eputs dup dup cstrlen swap eputs "`\n" eputs
        1 exit
    end
    drop
end
main
