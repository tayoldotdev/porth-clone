// Using `mmap` we will read the file at the path provided as the command line argument into the memory

include "std.porth"

memory fd sizeof(u64) end
memory statbuf sizeof(stat) end
memory content sizeof(Str) end
memory line sizeof(Str) end
memory word sizeof(Str) end
memory line_number sizeof(u64) end

argc 2 < if 
    "Usage: " eputs 0 nth_argv cstr-to-str eputs " <file>\n" eputs
    "ERROR: no input file was provided" eputs
    1 exit
end

"File name: " puts 1 nth_argv cstr-to-str puts "\n" puts

// open the file
0          // mode
O_RDONLY   // flags
1 nth_argv // pathname
AT_FDCWD   // dirfd
openat

dup 0 < if 
    "ERROR: could not open file `" eputs 1 nth_argv cstr-to-str eputs "` not found\n" eputs
    1 exit
end

// store file descriptor to a global variable on the memory!
fd !64

// get the size of the file
statbuf fd @64 fstat 0 < if 
    "ERROR: could not determine the size of the file `" eputs 1 nth_argv cstr-to-str eputs "`\n" eputs
    1 exit
end

//       void *mmap(void addr[.length], size_t length, int prot, int flags, int fd, off_t offset);

// read the field of the `statbuf` and write it into `Str.count` of the `content`
// save the size of the file into the count of the content
statbuf @stat.st_size content !Str.count 

// memory map the file
0                         // offset
fd @64                    // fd
MAP_PRIVATE               // flags
PROT_READ                 // protc
statbuf stat.st_size @64  // length
NULL                      // addr
mmap
// save output of mmap onto `Str.data` of the `content` memory
content Str.data !64


content Str.data @64 0 < if 
    "ERROR: could not memory map file `" eputs 1 nth_argv cstr-to-str eputs "`\n" eputs
    1 exit
end

// parse lines of the input file
0 line_number !64
while content Str.count @64 0 > do
    '\n' line content str-chop-by-delim
    while line Str.count @64 0 > do
        line str-trim-left
        ' ' word line str-chop-by-delim
        1 nth_argv cstr-to-str puts ": " puts line_number @64 putu ": " puts
        word @Str "+" streq if 
            "Compilation of PLUS\n" puts
        else word @Str "-" streq if*
            "Compilation of MINUS\n" puts
        else word @Str "print" streq if*
            "Compilation of PRINT\n" puts
        else
            "Parsing a word as a number: `" puts word @Str puts "`\n" puts
        end
    end
    line_number inc64
end
