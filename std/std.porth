macro NULL 0 end

macro nop end

macro true 0 0 = end
macro false 0 0 != end

// Standard streams
macro stdin  0 end
macro stdout 1 end
macro stderr 2 end

// Syscalls
macro SYS_read            0   end 
macro SYS_write           1   end 
macro SYS_open            2   end 
macro SYS_close           3   end 
macro SYS_exit            60  end
macro SYS_clock_nanosleep 230 end
macro SYS_openat          257 end
macro SYS_kcpm            312 end
macro SYS_finit_module    313 end

macro AT_FDCWD -100 end

macro O_RDONLY 0 end

macro CLOCK_MONOTONIC 1 end
macro TIMER_ABSTIME   1 end

macro sizeof(stat) 144 end

// wrappers for syscalls
macro write  SYS_write                    syscall3 end
macro read   SYS_read                     syscall3 end
macro openat SYS_openat                   syscall3 end
macro close  SYS_close                    syscall1 end
macro exit   SYS_exit                     syscall1 drop end
macro clock_nanosleep SYS_clock_nanosleep syscall4 end

macro / divmod drop end
macro % divmod swap drop end
macro mod % end
macro div / end

macro nth_argv
    8 * argv + @64 cast(ptr)
end

// old memory access (depricated)
macro .64 swap !64 end
macro ,64 @64 end

// increments value a the pointer
macro inc64
    dup @64 1 + swap !64
end

macro dec64
    dup @64 1 - swap !64
end

// helpers

macro 2drop 
    drop drop
end

macro 2dup
    over over
end

macro todo
    "TODO: not implemented" stderr write
    1 exit
end

// Calcualte the length of the string and push it on to the stack
// the first element on the stack contains the length pf the string literal
// the second element on the stack contains the full length including \0
// NOTE: it counts event the new line \n
macro cstrlen
    dup
    while dup , 0 != do 1 + end
    swap -
end

macro cstr-to-pstr
    dup cstrlen swap
end

macro cstreq 
    while
        if over , 0 != over , 0 != and do
            over , over , =
        else
            false
        end
    do
        1 +
        swap 1 + 
    end
    , 0 = swap , 0 = and
end

macro fputs
    write drop
end

macro eputs
    stderr fputs
end

macro puts
    stdout fputs
end
