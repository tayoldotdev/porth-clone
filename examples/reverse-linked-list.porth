include "./std.porth"

const offsetof(Node.value) sizeof(u64) offset end 
const offsetof(Node.prev)  sizeof(u64) offset end 
const sizeof(Node) reset end
proc Node.value offsetof(Node.value) + end
proc Node.prev  offsetof(Node.prev) + end
proc @Node.value Node.value @64 end
proc @Node.prev  Node.prev  @64 end
proc !Node.value Node.value !64 end
proc !Node.prev  Node.prev  !64 end

memory list_a sizeof(ptr) end
memory list_b sizeof(ptr) end

const NODES_CAP 1024 end
memory nodes_count sizeof(u64) end
memory nodes sizeof(Node) NODES_CAP * end

proc alloc_node
  nodes_count @64 sizeof(Node) * nodes +
  nodes_count dup @64 1 + swap !64
end

proc push_node
  over alloc_node 2dup swap @64 swap !Node.prev swap !64
  swap @64 cast(ptr) !Node.value
end

proc pop_node
  dup @64 cast(ptr) @Node.value swap
  dup @64 cast(ptr) @Node.prev swap !64
end

// initialize list_a
0 while dup 5 < do
  list_a over push_node
  1 +
end drop

// reverse list_a into list_b
while list_a @64 0 != do
  list_a pop_node list_b swap push_node
end

// print list_b
while list_b @64 0 != do
  list_b pop_node print
end

