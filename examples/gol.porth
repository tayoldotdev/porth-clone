include "std.porth"

// constants
const ROWS 10 end
const COLS 20 end
const BOARD_SIZE ROWS COLS * end

// memory layout
memory delta_time          sizeof(timespec) end
memory board_current_index sizeof(u64)      end
memory nbors               sizeof(u64)      end
memory value               sizeof(u64)      end
memory board_base          BOARD_SIZE 2 *   end
memory display             COLS 1 +         end

proc board_current -- ptr in
    board_base board_current_index @64 BOARD_SIZE * +
end

proc board_next -- ptr in
    board_base 1 board_current_index @64 - BOARD_SIZE * +
end

proc swap_boards in
    1 board_current_index @64 - board_current_index !64
end

proc display_row ptr -- in
    0 while dup COLS < do
      over over + @8 0 = if 
        display over + '.' swap !8
      else
        display over + '#' swap !8
      end
      1 +
    end drop
    COLS display + '\n' swap !8
    COLS 1 + display puts
    drop
end

proc display_board ptr -- in
    0 while dup ROWS < do
      over over COLS * + display_row
      1 +
    end drop
    drop
end

proc display_current_board in
    board_current display_board
end

proc get_current_cell int int -- int in
    swap COLS * + board_current + @8
end

proc set_next_cell int int int -- in
    value !64
    swap COLS * + board_next +
    value @64
    swap !8
end

proc in_bounds int int -- bool in
    dup 0 >= swap COLS < and
    swap
    dup 0 >= swap ROWS < and
    and
end

proc count_current_nbors int int -- int in
    0 nbors !64
  
    over over 1 - swap 1 - swap over over in_bounds
    rot rot swap COLS * + board_current + @8 1 =
    and if nbors inc64 end
  
    over over 1 - over over in_bounds
    rot rot swap COLS * + board_current + @8 1 =
    and if nbors inc64 end
  
    over over 1 - swap 1 + swap over over in_bounds
    rot rot swap COLS * + board_current + @8 1 =
    and if nbors inc64 end
  
    over over swap 1 - swap over over in_bounds
    rot rot swap COLS * + board_current + @8 1 =
    and if nbors inc64 end
  
    over over swap 1 + swap over over in_bounds
    rot rot swap COLS * + board_current + @8 1 =
    and if nbors inc64 end
  
    over over 1 + swap 1 - swap over over in_bounds
    rot rot swap COLS * + board_current + @8 1 =
    and if nbors inc64 end
  
    over over 1 + over over in_bounds
    rot rot swap COLS * + board_current + @8 1 =
    and if nbors inc64 end
  
    over over 1 + swap 1 + swap over over in_bounds
    rot rot swap COLS * + board_current + @8 1 =
    and if nbors inc64 end
  
    drop drop
    nbors @64
end

proc compute_next_board in
    0 while dup ROWS < do
      0 while dup COLS < do
        over over get_current_cell 1 = if 
          over over count_current_nbors dup 2 = swap 3 = or if 
            over over 1 set_next_cell
          else
            over over 0 set_next_cell
          end
        else
          over over count_current_nbors 3 = if 
            over over 1 set_next_cell
          else
            over over 0 set_next_cell
          end
        end
  
        1 +
      end drop
      1 +
    end drop
end

// .*.
// ..*
// ***
proc put_glider ptr -- in
    dup 0 COLS * 1 + + 1 swap !8
    dup 1 COLS * 2 + + 1 swap !8
    dup 2 COLS * 0 + + 1 swap !8
    dup 2 COLS * 1 + + 1 swap !8
    dup 2 COLS * 2 + + 1 swap !8
    drop
end

proc main in
    100000000 delta_time 8 + !64

    board_current put_glider

    while true do
        display_current_board
        compute_next_board
        swap_boards

        NULL delta_time 0 CLOCK_MONOTONIC clock_nanosleep drop
        "\033[" puts ROWS putu "A" puts
        "\033[" puts COLS putu "D" puts
    end
end

main

