include "std.porth"

memory fd sizeof(u64) end
memory statbuf sizeof(stat) end
memory content sizeof(Str) end
memory line sizeof(Str) end
memory word sizeof(Str) end

if argc 2 < do
    "Usage: " eputs 0 nth_argv cstr-to-str eputs " <file>\n" eputs
    "ERROR: no input file was provided" eputs
    1 exit
end

"File name: " puts 1 nth_argv cstr-to-str puts "\n" puts

0          // mode
O_RDONLY   // flags
1 nth_argv // pathname
AT_FDCWD   // dirfd
openat

if dup 0 < do
    "ERROR: could not open file `" eputs 1 nth_argv cstr-to-str eputs "` not found\n" eputs
    1 exit
end

// store file descriptor on the memory!
fd !64

if statbuf fd @64 fstat 0 < do
    "ERROR: could not determine the size of the file `" eputs 1 nth_argv cstr-to-str eputs "`\n" eputs
    1 exit
end

//       void *mmap(void addr[.length], size_t length, int prot, int flags, int fd, off_t offset);

// read the field of the `statbuf` and write it into `Str.count` of the `content`
statbuf stat.st_size @64 content Str.count !64

0                         // offset
fd @64                    // fd
MAP_PRIVATE               // flags
PROT_READ                 // protc
statbuf stat.st_size @64  // length
NULL                      // addr
mmap

// save output of mmap onto `Str.data` of the `content` memory
content Str.data !64

if content Str.data @64 0 < do
    "ERROR: could not memory map file `" eputs 1 nth_argv cstr-to-str eputs "`\n" eputs
    1 exit
end

// handle each line in the file
while content Str.count @64 0 > do
    '\n' line content str-chop-by-delim
    // handle each word in the line
    while line Str.count @64 0 > do
        line str-trim-left
        ' ' word line str-chop-by-delim
        word @Str puts
    end
    "\n" puts
end
